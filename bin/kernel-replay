#!/usr/bin/env ruby
require 'optparse'
require 'yaml'
require 'narray_ffi'
require 'BOAST'

BOAST.set_array_start(0)
BOAST.set_default_int_size(8)

module BOAST
  module KernelReplay

    TYPE_MAP = {
      "double" => BOAST::Real::new(size: 8),
      "float" => BOAST::Real::new(size: 4),
      "size" => BOAST::Sizet::new(signed: false),
      "uint" => BOAST::Int::new(size: 4, signed: false)
    }

    NARRAY_TYPE_MAP = {
      "char" => NArray::BYTE,
      "short" => NArray::SINT,
      "int" => NArray::INT,
      "float" => NArray::SFLOAT,
      "double" => NArray::FLOAT
    }

    UNPACK_TYPE_MAP = {
      "double" => "D",
      "float" => "F",
      "uint" => "L",
      "size" => "J"

    }

    def self.create_arguments(arguments)
      arguments.collect { |name, arg|
        options = {}
        array = arg["array"]
        direction = arg["direction"]
        type = TYPE_MAP[arg["type"]]
        raise "Unknown type #{arg["type"]}!" unless type
        options.merge! type.to_hash
        options[:dim] = BOAST::Dimension::new() if array
        if direction
          options[:dir] = direction.to_sym
        elsif array
          options[:dir] = :inout
        else
          options[:dir] = :in
        end
        BOAST::Variable( name, type.class, **options)
      }
    end

    def self.create_kernel(name, instance, arguments, returns: nil)
      instance_arguments = arguments.dup
      instance_arguments.merge!(instance["arguments"]).compact! if instance["arguments"]
      args = BOAST::KernelReplay::create_arguments(instance_arguments)
      procedure = BOAST::Procedure::new( name, args, return: returns )
      str = nil
      File.open(instance["file"], "r") { |f| str = StringIO::new(f.read) }
      k = BOAST::CKernel::new(code: str, lang: BOAST::const_get(instance["language"]))
      k.procedure = procedure
      k
    end

    def self.create_array_call_argument(name, arg, directory)
      filename = File::join(directory, "#{name}.in")
      data = File::read(filename, mode: "rb")
      if (type = NARRAY_TYPE_MAP[arg["type"]])
        n_a = NArray::to_na(data, type)
      else
        data
      end
    end

    def self.create_scalar_call_argument(name, arg, directory)
      filename = File::join(directory, "#{name}.in")
      if (type = UNPACK_TYPE_MAP[arg["type"]])
        File::read(filename, mode: "rb").unpack("#{type}").first
      else
        "Unsupported Scalar type: #{arg["type"]}!"
      end
    end

    def self.create_array_output_argument(name, arg, directory)
      if arg["direction"] == "in"
        filename = File::join(directory, "#{name}.in")
      else
        filename = File::join(directory, "#{name}.out")
      end
      data = File::read(filename, mode: "rb")
      if (type = NARRAY_TYPE_MAP[arg["type"]])
        n_a = NArray::to_na(data, type)
      else
        data
      end
    end

    def self.create_scalar_output_argument(name, arg, directory)
      if ["inout", "out"].include? arg["direction"]
        filename = File::join(directory, "#{name}.out")
      else
        filename = File::join(directory, "#{name}.in")
      end
      if (type = UNPACK_TYPE_MAP[arg["type"]])
        File::read(filename, mode: "rb").unpack("#{type}").first
      else
        "Unsupported Scalar type: #{arg["type"]}!"
      end
    end

    def self.create_opencl_enqueue_argument(arg, directory)
      case arg
        when Numeric
          return [arg]
        when Array
          return arg
        when String
          filename = File::join(directory, arg)
          if File.exist?(filename)
            return File::read(filename, mode: "rb").unpack("J*")
          else
            return nil
          end
        else
        raise "Unsupported argument class for OpenCL #{arg.class}!"
      end
    end

    def self.create_gpu_enqueue_arguments(instance, directory)
      gws = "global_work_size"
      gws = instance["global_work_size"] if instance["global_work_size"]
      lws = "local_work_size"
      lws = instance["local_work_size"] if instance["local_work_size"]
      gwo = "global_work_offset"
      gwo = instance["global_work_offset"] if instance["global_work_offset"]
      bn  = "block_number"
      bn  = instance["block_number"] if instance["block_number"]
      bs  = "block_size"
      bs  = instance["block_size"] if instance["block_size"]
      opts = {}
      opts[:global_work_size] = create_opencl_enqueue_argument(gws, directory)
      opts[:local_work_size] = create_opencl_enqueue_argument(lws, directory)
      opts[:global_work_offset] = create_opencl_enqueue_argument(gwo, directory)
      opts[:block_number] = create_opencl_enqueue_argument(bn, directory)
      opts[:block_size] = create_opencl_enqueue_argument(bs, directory)
      opts
    end

    def self.create_call_arguments(instance, arguments, directory)
      instance_arguments = arguments.dup
      instance_arguments.merge!(instance["arguments"]).compact! if instance["arguments"]
      call_args = instance_arguments.collect { |name, arg|
        next unless arg
        array = arg["array"]
        if array
          create_array_call_argument(name, arg, directory)
        else
          create_scalar_call_argument(name, arg, directory)
        end
      }
      if ["CL", "CUDA"].include? instance["language"]
        call_args.push create_gpu_enqueue_arguments(instance, directory)
      end
      call_args
    end

    def self.create_output_arguments(instance, arguments, directory)
      instance_arguments = arguments.dup
      instance_arguments.merge!(instance["arguments"]).compact! if instance["arguments"]
      instance_arguments.collect { |name, arg|
        array = arg["array"]
        if array
          create_array_output_argument(name, arg, directory)
        else
          create_scalar_output_argument(name, arg, directory)
        end
      }
    end

    def self.compare_array_arguments(name, arg, input, output, ret, res)
      case input
      when String
        type = UNPACK_TYPE_MAP[arg["type"]]
        raise "Unsupported type #{arg["type"]}!" unless type
        input_arr = input.unpack("#{type}*")
        output_arr = output.unpack("#{type}*")
        err = input_arr.size.times.collect { |i| (input_arr[i] - output_arr[i]).abs }.max
      when NArray
        err = (output - input).abs.max
      else
        raise "Unsupported array format #{input.class}!"
      end
      if arg["direction"] != "in" || err > 0.0
        res[name] = err
      end
    end

    def self.compare_scalar_arguments(name, arg, input, output, ret, res)
      err = (input - output).abs
      res[name] = err if ["inout", "out"].include?(arg["direction"]) || err > 0.0
    end

    def self.compare_arguments(instance, arguments, inputs, outputs, ret)
      res = {}
      instance_arguments = arguments.dup
      instance_arguments.merge!(instance["arguments"]).compact! if instance["arguments"]
      instance_arguments.each_with_index { |(name, arg), i|
        array = arg["array"]
        if array
          compare_array_arguments(name, arg, inputs[i], outputs[i], ret, res)
        else
          compare_scalar_arguments(name, arg, inputs[i], outputs[i], ret, res)
        end
      }
      return res
    end

  end
end

$options = {
  fortran: true,
  c: true,
  cuda: false,
  opencl: true
}

OptionParser.new do |opts|
  opts.banner = "kernel-replay [options] kernel_file"

  opts.on("-c", "--[no-]check", "Check kernel run results") do |c|
    $options[:check] = c
  end

  opts.on("--[no-]cuda", "Enable/disable CUDA") do |c|
    $options[:cuda] = c
  end

  opts.on("--[no-]fortran", "Enable/disable FORTRAN") do |c|
    $options[:fortran] = c
  end

  opts.on("--[no-]c", "Enable/disable C") do |c|
    $options[:c] = c
  end

  opts.on("--[no-]opencl", "Enable/disable OpenCL") do |c|
    $options[:opencl] = c
  end

  opts.on("-b", "--benchmark=REPETITIONS", "Benckmark kernel") do |b|
    $options[:benchmark] = b.to_i
  end

  opts.on("-a", "--[no-]inspect-arguments", "Print arguments before and after call") do |c|
    $options[:print_args] = c
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end

end.parse!

input_file = ARGV[0]
raise "Invalid file #{input_file}" unless File::file?(input_file)

kernel_file = YAML::load_file(input_file)

directory = File.dirname(input_file)
Dir.chdir(directory)

p name = kernel_file["name"]
p arguments = kernel_file["arguments"]

kernel_file["instances"].each { |instance|
  case instance["language"]
  when "CUDA"
    next unless $options[:cuda]
  when "CL"
    next unless $options[:opencl]
  when "C"
    next unless $options[:c]
  when "FORTRAN"
    next unless $options[:fortran]
  end
  p instance
  k = BOAST::KernelReplay::create_kernel(name, instance, arguments)
  k.build
  kernel_file["data_sets"].each { |set|
    puts "\t#{set}:"
    Dir::new(set).reject { |d| d == ".." || d == "." }.each { |dir|
      begin
        puts "\t\t#{dir}:"
        args = BOAST::KernelReplay::create_call_arguments(instance, arguments, File.join(set, dir))
        p args if $options[:print_args]
        ret = k.run(*args)
        p args if $options[:print_args]
        puts "\t\t#{ret}"
        if $options[:check]
          out_args = BOAST::KernelReplay::create_output_arguments(instance, arguments, File.join(set, dir))
          res = BOAST::KernelReplay::compare_arguments(instance, arguments, args, out_args, ret)
          puts "\t\t#{res}"
        end
        if $options[:benchmark]
          arguments.each { |name, arg|
            if arg["array"] && arg["direction"] != "in" &&  arg["direction"] != "out"
              warn "\t\tArgument #{name} is #{arg["direction"] == "inout" ? "" : "potentially "}inout!"
            end
          }
          rets = $options[:benchmark].times.collect {
            k.run(*args)[:duration]
          }
          puts "\t\tBest run: #{rets.min} s"
        end
      rescue RuntimeError => e
        puts e
      end
    }
  }
}
